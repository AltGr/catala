(* This file is part of the Catala compiler, a specification language for tax and social benefits
   computation rules. Copyright (C) 2020 Inria, contributor: Denis Merigoux
   <denis.merigoux@inria.fr>

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   in compliance with the License. You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License
   is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   or implied. See the License for the specific language governing permissions and limitations under
   the License. *)

(** This modules weaves the source code and the legislative text together into a document that law
    professionals can understand. *)

module A = Ast
module P = Printf
module R = Re.Pcre
module C = Cli

let pre_html (s : string) = s

let wrap_html (code : string) (source_files : string list) (custom_pygments : string option)
    (language : Cli.language_option) : string =
  let pygments = match custom_pygments with Some p -> p | None -> "pygmentize" in
  let css_file = Filename.temp_file "catala_css_pygments" "" in
  let pygments_args = [| "-f"; "html"; "-S"; "colorful" |] in
  let cmd =
    Printf.sprintf "%s %s > %s" pygments (String.concat " " (Array.to_list pygments_args)) css_file
  in
  let return_code = Sys.command cmd in
  if return_code <> 0 then
    Errors.weaving_error
      (Printf.sprintf "pygmentize command \"%s\" returned with error code %d" cmd return_code);
  let oc = open_in css_file in
  let css_as_string = really_input_string oc (in_channel_length oc) in
  close_in oc;
  Printf.sprintf
    "<head>\n\
     <style>\n\
     %s\n\
     </style>\n\
     <meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>\n\
     </head>\n\
     <h1>%s<br />\n\
     <small>%s Catala version %s</small>\n\
     </h1>\n\
     <p>\n\
     %s\n\
     </p>\n\
     <ul>\n\
     %s\n\
     </ul>\n\
     %s"
    css_as_string
    ( match language with
    | C.Fr -> "Implémentation de texte législatif"
    | C.En -> "Legislative text implementation" )
    (match language with C.Fr -> "Document généré par" | C.En -> "Document generated by")
    ( match Build_info.V1.version () with
    | None -> "n/a"
    | Some v -> Build_info.V1.Version.to_string v )
    ( match language with
    | C.Fr -> "Fichiers sources tissés dans ce document"
    | C.En -> "Source files weaved in this document" )
    (String.concat "\n"
       (List.map
          (fun filename ->
            let mtime = (Unix.stat filename).Unix.st_mtime in
            let ltime = Unix.localtime mtime in
            let ftime =
              Printf.sprintf "%d-%02d-%02d, %d:%02d" (1900 + ltime.Unix.tm_year) ltime.Unix.tm_mon
                ltime.Unix.tm_mday ltime.Unix.tm_hour ltime.Unix.tm_min
            in
            Printf.sprintf "<li><tt>%s</tt>, %s %s</li>"
              (pre_html (Filename.basename filename))
              ( match language with
              | C.Fr -> "dernière modification le"
              | C.En -> "last modification" )
              ftime)
          source_files))
    code

let pygmentize_code (c : string Pos.marked) (language : C.language_option)
    (custom_pygments : string option) : string =
  C.debug_print (Printf.sprintf "Pygmenting the code chunk %s" (Pos.to_string (Pos.get_position c)));
  let temp_file_in = Filename.temp_file "catala_html_pygments" "in" in
  let temp_file_out = Filename.temp_file "catala_html_pygments" "out" in
  let oc = open_out temp_file_in in
  Printf.fprintf oc "%s" (Pos.unmark c);
  close_out oc;
  let pygments = match custom_pygments with Some p -> p | None -> "pygmentize" in
  let pygments_lexer = match language with C.Fr -> "catala_fr" | C.En -> "catala_en" in
  let pygments_args =
    [|
      "-l";
      pygments_lexer;
      "-f";
      "html";
      "-O";
      "style=colorful,linenos=table,linenostart="
      ^ string_of_int (Pos.get_start_line (Pos.get_position c));
      "-o";
      temp_file_out;
      temp_file_in;
    |]
  in
  let cmd = Printf.sprintf "%s %s" pygments (String.concat " " (Array.to_list pygments_args)) in
  let return_code = Sys.command cmd in
  if return_code <> 0 then
    Errors.weaving_error
      (Printf.sprintf "pygmentize command \"%s\" returned with error code %d" cmd return_code);
  let oc = open_in temp_file_out in
  let output = really_input_string oc (in_channel_length oc) in
  close_in oc;
  output

let primitive_typ_to_html (typ : Ast.primitive_typ) : string =
  match typ with
  | Integer -> "<span class='typ-integer'></span>"
  | Decimal -> "<span class='typ-decimal'></span>"
  | Boolean -> "<span class='typ-boolean'></span>"
  | Money -> "<span class='typ-money'></span>"
  | Text -> "<span class='typ-text'></span>"
  | Date -> "<span class='typ-date'></span>"
  | Named typ -> "<span class='typ-named'>" ^ typ ^ "</span>"

let rec base_typ_to_html (typ : Ast.base_typ) : string =
  let open Ast in
  match typ with
  | Condition -> "<span class='condition-typ'>condition</span>"
  | Data typ -> (
      match typ with
      | Primitive typ -> primitive_typ_to_html typ
      | Collection typ ->
          Printf.sprintf "<span class='collection-typ'>%s</span>"
            (base_typ_to_html (Data (Pos.unmark typ)))
      | Optional typ ->
          Printf.sprintf "<span class='optional-typ'>%s</span>"
            (base_typ_to_html (Data (Pos.unmark typ))) )

let typ_to_html (typ : Ast.typ) : string =
  let open Ast in
  match typ with
  | Base typ -> base_typ_to_html typ
  | Func f_typ ->
      Printf.sprintf "<span class='func-typ-arg'>%s</span>\n<span class='func-typ-return'>%s</span>"
        (base_typ_to_html (Pos.unmark f_typ.arg_typ))
        (base_typ_to_html (Pos.unmark f_typ.return_typ))

let code_ast_to_html (ast : Ast.code_block) : string =
  let open Ast in
  String.concat "\n\n"
    (List.map
       (fun item ->
         "<div class='code-item'>\n"
         ^ ( match Pos.unmark item with
           | StructDecl struct_decl ->
               let struct_fields =
                 String.concat "\n"
                   (List.map
                      (fun field ->
                        let field = Pos.unmark field in
                        Printf.sprintf
                          "<div class='struct-decl-field'>\n\
                           <span class='struct-decl-field-name'>%s</span>\n\
                           <span class='struct-decl-field-type'>%s</span>\n\
                           </div>"
                          (Pos.unmark field.struct_decl_field_name)
                          (typ_to_html (Pos.unmark field.struct_decl_field_typ)))
                      struct_decl.struct_decl_fields)
               in
               Printf.sprintf
                 "<div class='struct-decl'>\n<span class='struct-decl-name'>%s</span>%s\n</div>"
                 (Pos.unmark struct_decl.struct_decl_name)
                 struct_fields
           | _ -> "" )
         ^ "\n</div>")
       ast)

type program_state = InsideArticle | OutsideArticle

let program_item_to_html (i : A.program_item) (_custom_pygments : string option)
    (language : C.language_option) (state : program_state) : string * program_state =
  let closing_div =
    (* First we terminate the div of the previous article if need be *)
    match (i, state) with
    | (A.LawHeading _ | A.LawArticle _), InsideArticle -> "<!-- Closing article div -->\n</div>\n\n"
    | _ -> ""
  in
  let new_state =
    match (i, state) with
    | A.LawArticle _, _ -> InsideArticle
    | A.LawHeading _, InsideArticle -> OutsideArticle
    | _ -> state
  in
  (* Then we print the actual item *)
  let item_string =
    match i with
    | A.LawHeading (title, precedence) ->
        let h_number = precedence + 2 in
        P.sprintf "<h%d class='law-heading'>%s</h%d>" h_number (pre_html title) h_number
    | A.LawText t -> "<p class='law-text'>" ^ pre_html t ^ "</p>"
    | A.LawArticle a ->
        P.sprintf
          "<div class='article-container'>\n\n<div class='article-title'><a href='%s'>%s</a></div>"
          ( match (a.law_article_id, language) with
          | Some id, C.Fr ->
              let ltime = Unix.localtime (Unix.time ()) in
              P.sprintf "https://beta.legifrance.gouv.fr/codes/id/%s/%d-%02d-%02d" id
                (1900 + ltime.Unix.tm_year) ltime.Unix.tm_mon ltime.Unix.tm_mday
          | _ -> "#" )
          (pre_html (Pos.unmark a.law_article_name))
    | A.CodeBlock (ast, _c) | A.MetadataBlock (ast, _c) ->
        (* let _formatted_original_code = P.sprintf "<div>\n<div
           style='text-align:right'><tt>%s</tt></div>\n%s\n</div>" (Pos.get_file (Pos.get_position
           c)) (pygmentize_code (Pos.same_pos_as ("/*" ^ Pos.unmark c ^ "*/") c) language
           custom_pygments) in *)
        let pretty_printed_ast = code_ast_to_html ast in
        pretty_printed_ast
    | A.LawInclude _ -> ""
  in
  (closing_div ^ item_string, new_state)

let ast_to_html (program : A.program) (custom_pygments : string option)
    (language : C.language_option) : string =
  let i_s, _ =
    List.fold_left
      (fun (acc, state) i ->
        let i_s, new_state = program_item_to_html i custom_pygments language state in
        (i_s :: acc, new_state))
      ([], OutsideArticle) program.program_items
  in
  String.concat "\n\n" (List.rev i_s)
