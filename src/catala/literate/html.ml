(* This file is part of the Catala compiler, a specification language for tax and social benefits
   computation rules. Copyright (C) 2020 Inria, contributor: Denis Merigoux
   <denis.merigoux@inria.fr>

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   in compliance with the License. You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License
   is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   or implied. See the License for the specific language governing permissions and limitations under
   the License. *)

(** This modules weaves the source code and the legislative text together into a document that law
    professionals can understand. *)

module A = Ast
module P = Printf
module R = Re.Pcre
module C = Cli

let pre_html (s : string) = s

let wrap_html (code : string) (source_files : string list) (language : Cli.language_option) =
  Printf.sprintf
    "<h1>%s<br />\n\
     <small>%s Catala version %s</small>\n\
     </h1>\n\
     <p>\n\
     %s\n\
     </p>\n\
     <ul>\n\
     %s\n\
     </ul>\n\
     <hrule />\n\
     %s"
    ( match language with
    | C.Fr -> "Implémentation de texte législatif"
    | C.En -> "Legislative text implementation" )
    (match language with C.Fr -> "Document généré par" | C.En -> "Document generated by")
    ( match Build_info.V1.version () with
    | None -> "n/a"
    | Some v -> Build_info.V1.Version.to_string v )
    ( match language with
    | C.Fr -> "Fichiers sources tissés dans ce document"
    | C.En -> "Source files weaved in this document" )
    (String.concat "\n"
       (List.map
          (fun filename ->
            let mtime = (Unix.stat filename).Unix.st_mtime in
            let ltime = Unix.localtime mtime in
            let ftime =
              Printf.sprintf "%d-%02d-%02d, %d:%02d" ltime.Unix.tm_mday ltime.Unix.tm_mon
                (1900 + ltime.Unix.tm_year) ltime.Unix.tm_hour ltime.Unix.tm_min
            in
            Printf.sprintf "<li><pre>%s</pre>, %s %s</li>"
              (pre_html (Filename.basename filename))
              ( match language with
              | C.Fr -> "dernière modification le"
              | C.En -> "last modification" )
              ftime)
          source_files))
    code

let program_item_to_html (i : A.program_item) (_language : C.language_option) : string =
  match i with
  | A.LawHeading (title, precedence) ->
      let h_number = precedence + 2 in
      P.sprintf "<h%d>%s</h%d>" h_number (pre_html title) h_number
  | A.LawText t -> pre_html t
  | A.LawArticle a -> P.sprintf "<div>%s</div>" (pre_html (Pos.unmark a.law_article_name))
  | A.CodeBlock (_, c) -> P.sprintf "<pre>\n/*%s*/\n</pre>" (Pos.unmark c)
  | A.MetadataBlock (_, c) -> P.sprintf "<pre>\n/*%s*/\n</pre>" (Pos.unmark c)
  | A.LawInclude (_file, _page) -> ""

let ast_to_html (program : A.program) (language : C.language_option) : string =
  String.concat "\n\n" (List.map (fun i -> program_item_to_html i language) program.program_items)
